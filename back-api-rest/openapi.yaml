openapi: 3.0.0
info:
  title: FeYConsuelo REST Service
  description: Backend para gesti√≥n de Fe y Consuelo
  contact:
    name: Eduardo Sanchez Bonilla
    email: eduardosanchezbonilla@gmail.com
  license:
    name: Apache License Version 2.0
  version: '1.0'
servers:
  - url: http://localhost:8082
    description: Generated server url
tags:
  - name: auth-controller
    description: Authorization operations
  - name: musician-controller
    description: Musician operations
  - name: voice-controller
    description: Voice operations
  - name: user-controller
    description: User operations
  - name: partiture-group-controller
    description: Partiture Group operations
  - name: partiture-controller
    description: Partiture operations
  - name: user-partiture-group-controller
    description: User Partiture Group operations
  - name: inventory-controller
    description: Inventory operations
  - name: musician-inventory-controller
    description: Musician inventory operations
  - name: user-partiture-request-controller
    description: User Partiture Request operations
paths:
  "/auth/login":
    post:
      tags:
        - auth-controller
      summary: Login de usuario
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        '200':
          description: Login ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponseDto"
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician":
    post:
      tags:
        - musician-controller
      summary: Add a new musician register to the database
      operationId: postMusician
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns all the musician registers from the database
      operationId: getAllMusicians
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/group-by-voice":
    get:
      tags:
        - musician-controller
      summary: Returns all the musician registers from the database group by voice
      operationId: getMusiciansGroupByVoice
      parameters:
        - name: name
          in: query
          description: Nombre del musico a filtrar
          required: false
          example: 'Sergio Lozano'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianGroupByVoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}":
    put:
      tags:
        - musician-controller
      summary: Update any data for a musician register in the database
      operationId: updateMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns the musician register from the database
      operationId: getMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-controller
      summary: Delete a musician register from the database
      operationId: deleteMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{dni}/change-expired-password":
    put:
      tags:
        - musician-controller
      summary: Update password for the user asociated to the musician register in the database
      operationId: changeExpiredPasswordMusician
      parameters:
        - name: dni
          in: path
          description: Usuario asociado al musico (dni)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianChangeExpiredPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{dni}/reset-password":
    put:
      tags:
        - musician-controller
      summary: Reset password for the user asociated to the musician register in the database
      operationId: resetPasswordMusician
      parameters:
        - name: dni
          in: path
          description: Usuario asociado al musico (dni)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}/inventory/{inventoryId}":
    post:
      tags:
        - musician-inventory-controller
      summary: Insert a inventory elemento asocied to musician
      operationId: insertMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-inventory-controller
      summary: Delete a inventory element asocied to musician
      operationId: deleteMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}/inventory":
    get:
      tags:
        - musician-inventory-controller
      summary: Get all inventory elements of a musician
      operationId: getMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianInventoryResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/inventory/{inventoryId}/musician":
    get:
      tags:
        - musician-inventory-controller
      summary: Get all musician with inventaryId associed
      operationId: getMusicianWithInventoryAssociated
      parameters:
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user":
    post:
      tags:
        - user-controller
      summary: Add a new user register to the database
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - user-controller
      summary: Returns all the users registers from the database
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/group-by-role":
    get:
      tags:
        - user-controller
      summary: Returns all the user registers from the database group by user
      operationId: getUsersGroupByRole
      parameters:
        - name: filter
          in: query
          description: Filtro para username o nombre
          required: false
          example: 'admin'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserGroupByRoleResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/{username}":
    get:
      tags:
        - user-controller
      summary: Returns the user register from the database
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - user-controller
      summary: Delete a user register from the database
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/detail":
    put:
      tags:
        - user-controller
      summary: Update details of user
      operationId: updateUserDetail
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserDetailRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/roles":
    put:
      tags:
        - user-controller
      summary: Update the roles for a user register in the database
      operationId: updateUserRoles
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserRolesRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/password":
    put:
      tags:
        - user-controller
      summary: Update the password for a user register in the database
      operationId: updateUserPassword
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/firebase-token":
    put:
      tags:
        - user-controller
      summary: Update the firebase_token for a user register in the database
      operationId: updateUserFirebaseToken
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserFirebaseTokenRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/reset":
    put:
      tags:
        - user-controller
      summary: Resetea el password de un usuario
      operationId: resetUserPassword
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResetUserPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/partiture-group/{partitureGroupId}":
    post:
      tags:
        - user-partiture-group-controller
      summary: Insert a partiture group asocied to user
      operationId: insertUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
        - name: partitureGroupId
          in: path
          description: Id of partiture group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - user-partiture-group-controller
      summary: Delete a partiture group asocied to user
      operationId: deleteUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
        - name: partitureGroupId
          in: path
          description: Id of partiture group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/partiture-group":
    get:
      tags:
        - user-partiture-group-controller
      summary: Get all partiture group users
      operationId: getUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserPartitureGroupResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/voice":
    post:
      tags:
        - voice-controller
      summary: Add a new voice register to the database
      operationId: postVoice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns all the voices registers from the database
      operationId: getAllVoices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/voice/{voiceId}":
    put:
      tags:
        - voice-controller
      summary: Update any data for a voice register in the database
      operationId: updateVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns the voice register from the database
      operationId: getVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - voice-controller
      summary: Delete a voice register from the database
      operationId: deleteVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture-group":
    post:
      tags:
        - partiture-group-controller
      summary: Add a new partiture group
      operationId: postPartitureGroup
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PartitureGroupRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - partiture-group-controller
      summary: Returns all the partiture groups
      operationId: getAllPartitureGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PartitureGroupResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture-group/{partitureGroupId}":
    put:
      tags:
        - partiture-group-controller
      summary: Update any data for a vpartiture group
      operationId: updatePartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          description: Partiture Group Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PartitureGroupRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - partiture-group-controller
      summary: Returns the partiture group
      operationId: getPartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PartitureGroupResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - partiture-group-controller
      summary: Delete a partiture group
      operationId: deletePartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture/{partitureGroupGoogleId}":
    get:
      tags:
        - partiture-controller
      summary: Returns all partitures in a group
      operationId: getAllPartituresInPartitureGroup
      parameters:
        - name: partitureGroupGoogleId
          in: path
          description: Google Id of partiture group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PartitureResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/partiture/{partitureGoogleId}/download":
    get:
      tags:
        - partiture-controller
      summary: Descarga una partitura
      operationId: downloadPartiture
      parameters:
        - name: partitureGoogleId
          in: path
          description: Google id de la partitura
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PartitureResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/inventory":
    post:
      tags:
        - inventory-controller
      summary: Add a new inventory element register to the database
      operationId: postInventory
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InventoryRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - inventory-controller
      summary: Returns all the inventory elements registers from the database
      operationId: getAllInventories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/InventoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/inventory/{inventoryId}":
    put:
      tags:
        - inventory-controller
      summary: Update any data for a inventory element register in the database
      operationId: updateInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InventoryRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - inventory-controller
      summary: Returns the inventory element register from the database
      operationId: getInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InventoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - inventory-controller
      summary: Delete a inventory element register from the database
      operationId: deleteInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/{username}/partiture/request":
    post:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures for a user
      operationId: requestPartiture
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestPartitureRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    put:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures for a user
      operationId: markReadUnreadRequestPartiture
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestPartitureRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/partiture/request/all":
    get:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures
      operationId: getAllRequestPartitureGroupByUser
      parameters:
        - name: all
          in: query
          description: Indica si obtenemos todas las notificaciones (true) o solo las no leidas (false)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserRequestPartitureGroupByUserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

components:
  schemas:
    ######################################################################
    AuthRequestDto:
      description: Auth request data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Username'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Password'
          minLength: 8
          nullable: false
          example: 'password'

    ######################################################################
    AuthResponseDto:
      description: Auth response data
      required:
        - username
        - roles
        - token
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        token:
          type: string
          description: 'Jwt token'
        musician:
          $ref: '#/components/schemas/MusicianResponseDto'
        userDetail:
          $ref: '#/components/schemas/UserDetailResponseDto'

    ######################################################################
    MusicianRequestDto:
      description: Musician data
      required:
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voiceId
        - birthDate
        - registrationDate
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          minLength: 5
          nullable: false
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          nullable: false
          minLength: 1
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          nullable: false
          minLength: 1
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          nullable: false
          minLength: 1
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          nullable: false
          minLength: 1
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          nullable: false
          minLength: 1
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          nullable: false
          minLength: 1
          example: 'email@gmail.com'
        voiceId:
          type: integer
          format: int64
          description: 'Voice of musician'
          nullable: false
          minLength: 1
          example: 1
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'
        birthDate:
          type: string
          format: datetime
          description: 'Fecha de nacimiento'
          example: '2024-10-04T14:10:59.306Z'
        registrationDate:
          type: string
          format: datetime
          description: 'Fecha de incorporacion'
          example: '2024-10-04T14:10:59.306Z'

    ######################################################################
    MusicianChangeExpiredPasswordRequestDto:
      description: Musician User Password data
      required:
        - currentPassword
        - newPassword
        - repeatNewPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Contrase√±a actual'
          minLength: 8
          nullable: false
          example: 'password'
        newPassword:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatNewPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    MusicianResponseDto:
      description: Musician data
      required:
        - id
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voice
        - image
        - birthDate
        - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          example: 'email@gmail.com'
        voice:
          $ref: '#/components/schemas/VoiceResponseDto'
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'
        birthDate:
          type: string
          format: datetime
          description: 'Fecha de nacimiento'
          example: '2024-10-04T14:10:59.306Z'
        registrationDate:
          type: string
          format: datetime
          description: 'Fecha de incorporacion'
          example: '2024-10-04T14:10:59.306Z'

    ######################################################################
    MusicianGroupByVoiceResponseDto:
      description: Musician data grouped by voice
      type: object
      properties:
        voice:
          $ref: '#/components/schemas/VoiceResponseDto'
        musicians:
          type: array
          items:
            $ref: '#/components/schemas/MusicianResponseDto'

    ######################################################################
    UserGroupByRoleResponseDto:
      description: User data grouped by user
      type: object
      properties:
        role:
          type: string
          description: 'Role del usuario'
          nullable: false
          example: 'MUSICO'
        roleName:
          type: string
          description: 'Nombre del role del usuario'
          nullable: false
          example: 'MUSICO'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDto'

    ######################################################################
    UserRequestDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          minLength: 8
          nullable: false
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of usuario'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of usuario'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of usuario'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of usuario'
          example: 'Martos'
        province:
          type: string
          description: 'Province of usuario'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del usuario'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of user in base64'
          example: 'image'
        description:
          type: string
          description: 'Description'
          example: ''

    ######################################################################
    UpdateUserDetailRequestDto:
      description: User data
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of usuario'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of usuario'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of usuario'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of usuario'
          example: 'Martos'
        province:
          type: string
          description: 'Province of usuario'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del usuario'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of user in base64'
          example: 'image'
        description:
          type: string
          description: 'Description'
          example: ''

    ######################################################################
    UpdateUserRolesRequestDto:
      description: Update User data
      required:
        - roles
      type: object
      properties:
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false

    ######################################################################
    UpdateUserPasswordRequestDto:
      description: Update User Password data
      required:
        - currentPassword
        - newPassword
        - repeatNewPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Contrase√±a actual'
          minLength: 8
          nullable: false
          example: 'password'
        newPassword:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatNewPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    UpdateUserFirebaseTokenRequestDto:
      description: A√±ade el token al array de tokens del usuario, sino existe
      required:
        - firebaseToken
      type: object
      properties:
        firebaseToken:
          type: string
          description: Token del dispositivo del usuario
          minLength: 1
          nullable: false
          example: 'token'

    ######################################################################
    ResetUserPasswordRequestDto:
      description: Reset User Password data
      required:
        - password
        - repeatPassword
      type: object
      properties:
        password:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    UserResponseDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        passwordExpired:
          type: boolean
          description: 'Indica si el password ha expirado'
          example: true
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of user'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of user'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of user'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of user'
          example: 'Martos'
        province:
          type: string
          description: 'Province of user'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del user'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of iser in base64'
          example: 'image'
        description:
          type: string
          description: 'descripcion'
          example: ''

    ######################################################################
    UserDetailResponseDto:
      description: User data
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of user'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of user'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of user'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of user'
          example: 'Martos'
        province:
          type: string
          description: 'Province of user'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del user'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of iser in base64'
          example: 'image'
        description:
          type: string
          description: 'descripcion'
          example: ''

    ######################################################################
    VoiceRequestDto:
      description: Voice data
      required:
        - order
        - name
      type: object
      properties:
        order:
          type: integer
          description: 'Order'
          minLength: 1
          nullable: false
          example: 1
        name:
          type: string
          description: 'Name of voice'
          nullable: false
          minLength: 1
          example: '1¬™ CORNETA
          '
        image:
          type: string
          description: 'Image of voice'
          example: 'image'

    ######################################################################
    VoiceResponseDto:
      description: Voice data
      required:
        - id
        - order
        - name
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        order:
          type: integer
          description: 'Order'
          example: 1
        name:
          type: string
          description: 'Name of voice'
          example: '1¬™ CORNETA'
        image:
          type: string
          description: 'Image of voice in base64'
          example: 'image'

    ######################################################################
    PartitureGroupRequestDto:
      description: Partiture Group Data
      required:
        - name
        - googleId
      type: object
      properties:
        name:
          type: string
          description: 'Name of partiture group'
          nullable: false
          minLength: 1
          example: '1¬™ CORNETA'
        googleId:
          type: string
          description: 'Id de la carpeta en google drive'
          example: 'id'

    ######################################################################
    PartitureGroupResponseDto:
      description: Partiture Group Data
      required:
        - id
        - name
        - googleId
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of partiture group'
          example: '1¬™ CORNETA'
        googleId:
          type: string
          description: 'Id de la carpeta en google drive'
          example: 'id'

    ######################################################################
    UserPartitureGroupResponseDto:
      description: User Partiture Group Data
      required:
        - id
        - name
        - assigned
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of partiture group'
          example: '1¬™ CORNETA'
        assigned:
          type: boolean
          description: 'If group is assigned to user'
          example: true

    ######################################################################
    PartitureResponseDto:
      description: Partiture Data
      required:
        - name
        - googleId
        - content
      type: object
      properties:
        name:
          type: string
          description: 'Name of partiture'
          example: 'AMOR DE MADRE'
        googleId:
          type: string
          description: 'Id de la partitura en google drive'
          example: 'id'
        content:
          type: string
          description: 'Contenido del fichero en base 64'
          example: 'content'

    ######################################################################
    InventoryRequestDto:
      description: Inventory data
      required:
        - order
        - name
      type: object
      properties:
        order:
          type: integer
          description: 'Order'
          minLength: 1
          nullable: false
          example: 1
        name:
          type: string
          description: 'Name of inventary element'
          nullable: false
          minLength: 1
          example: 'CHAQUETA'
        image:
          type: string
          description: 'Image of inventory element'
          example: 'image'

    ######################################################################
    InventoryResponseDto:
      description: Inventory data
      required:
        - id
        - order
        - name
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        order:
          type: integer
          description: 'Order'
          example: 1
        name:
          type: string
          description: 'Name of inventory element'
          example: 'CHAQUETA'
        image:
          type: string
          description: 'Image of inventory element in base64'
          example: 'image'

    ######################################################################
    MusicianInventoryResponseDto:
      description: Musician Inventory data
      required:
        - id
        - name
        - assigned
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of inventory element'
          example: 'CHAQUETA'
        image:
          type: string
          description: 'Image of inventory element in base64'
          example: 'image'
        assigned:
          type: boolean
          description: 'If inventory element to user'
          example: true

    ######################################################################
    UserRequestPartitureRequestDto:
      description: User Request Partiture data
      required:
        - description
        - readed
        - markReadUnreadNotificationMessage
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: 1
        description:
          type: string
        readed:
          type: boolean
        markReadUnreadNotificationMessage:
          type: string

    ######################################################################
    UserRequestPartitureResponseDto:
      description: User Request Partiture data
      required:
        - id
        - username
        - description
        - readed
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Identifier'
          example: 1
        username:
          type: string
          description: 'Username'
          example: 'username'
        description:
          type: string
          example: 'description'
        readed:
          type: boolean
          example: false

    ######################################################################
    UserRequestPartitureGroupByUserResponseDto:
      description: User request partiture data grouped by user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponseDto'
        request:
          type: array
          items:
            $ref: '#/components/schemas/UserRequestPartitureResponseDto'


    ######################################################################
    ErrorDto:
      required:
        - message
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        name:
          type: string
          description: Error name
          example: 'Bad Request'
        message:
          type: string
          description: Error message
          example: 'Bad Request'