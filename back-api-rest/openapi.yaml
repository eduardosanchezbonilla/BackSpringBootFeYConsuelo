openapi: 3.0.0
info:
  title: FeYConsuelo REST Service
  description: Backend para gesti√≥n de Fe y Consuelo
  contact:
    name: Eduardo Sanchez Bonilla
    email: eduardosanchezbonilla@gmail.com
  license:
    name: Apache License Version 2.0
  version: '1.0'
servers:
  - url: http://localhost:8082
    description: Generated server url
tags:
  - name: auth-controller
    description: Authorization operations
  - name: musician-controller
    description: Musician operations
  - name: voice-controller
    description: Voice operations
  - name: user-controller
    description: User operations
paths:
  "/auth/login":
    post:
      tags:
        - auth-controller
      summary: Login de usuario
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        '200':
          description: Login ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponseDto"
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician":
    post:
      tags:
        - musician-controller
      summary: Add a new musician register to the database
      operationId: postMusician
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns all the musician registers from the database
      operationId: getAllMusicians
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/musician/{musicianId}":
    put:
      tags:
        - musician-controller
      summary: Update any data for a musician register in the database
      operationId: updateMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns the musician register from the database
      operationId: getMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-controller
      summary: Delete a musician register from the database
      operationId: deleteMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user":
    post:
      tags:
        - user-controller
      summary: Add a new user register to the database
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - user-controller
      summary: Returns all the users registers from the database
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/{username}":
    get:
      tags:
        - user-controller
      summary: Returns the user register from the database
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - user-controller
      summary: Delete a user register from the database
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/roles":
    put:
      tags:
        - user-controller
      summary: Update the roles for a user register in the database
      operationId: updateUserRoles
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserRolesDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/password":
    put:
      tags:
        - user-controller
      summary: Update the password for a user register in the database
      operationId: updateUserPassword
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserPasswordDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/voice":
    post:
      tags:
        - voice-controller
      summary: Add a new voice register to the database
      operationId: postVoice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns all the voices registers from the database
      operationId: getAllVoices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/voice/{voiceId}":
    put:
      tags:
        - voice-controller
      summary: Update any data for a voice register in the database
      operationId: updateVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns the voice register from the database
      operationId: getVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - voice-controller
      summary: Delete a voice register from the database
      operationId: deleteVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
components:
  schemas:
    ######################################################################
    AuthRequestDto:
      description: Auth request data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Username'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Password'
          minLength: 8
          nullable: false
          example: 'password'

    ######################################################################
    AuthResponseDto:
      description: Auth response data
      required:
        - username
        - roles
        - token
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        token:
          type: string
          description: 'Jwt token'

    ######################################################################
    MusicianRequestDto:
      description: Musician data
      required:
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voiceId
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          minLength: 5
          nullable: false
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          nullable: false
          minLength: 1
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          nullable: false
          minLength: 1
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          nullable: false
          minLength: 1
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          nullable: false
          minLength: 1
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          nullable: false
          minLength: 1
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          nullable: false
          minLength: 1
          example: 'email@gmail.com'
        voiceId:
          type: integer
          format: int64
          description: 'Voice of musician'
          nullable: false
          minLength: 1
          example: 1
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'

    ######################################################################
    MusicianResponseDto:
      description: Musician data
      required:
        - id
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voice
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          example: 'email@gmail.com'
        voice:
          $ref: '#/components/schemas/VoiceResponseDto'
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'

    ######################################################################
    UserRequestDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          minLength: 8
          nullable: false
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false

    ######################################################################
    UpdateUserRolesDto:
      description: Update User data
      required:
        - roles
      type: object
      properties:
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false

    ######################################################################
    UpdateUserPasswordDto:
      description: Update User Password data
      required:
        - currentPassword
        - newPassword
        - repeatNewPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Contrase√±a actual'
          minLength: 8
          nullable: false
          example: 'password'
        newPassword:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatNewPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    UserResponseDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'

    ######################################################################
    VoiceRequestDto:
      description: Voice data
      required:
        - order
        - name
      type: object
      properties:
        order:
          type: integer
          description: 'Order'
          minLength: 1
          nullable: false
          example: 1
        name:
          type: string
          description: 'Name of voice'
          nullable: false
          minLength: 1
          example: '1¬™ CORNETA
          '
        image:
          type: string
          description: 'Image of voice'
          example: 'image'

    ######################################################################
    VoiceResponseDto:
      description: Voice data
      required:
        - id
        - order
        - name
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        order:
          type: integer
          description: 'Order'
          example: 1
        name:
          type: string
          description: 'Name of voice'
          example: '1¬™ CORNETA'
        image:
          type: string
          description: 'Image of voice in base64'
          example: 'image'

    ######################################################################
    ErrorDto:
      required:
        - message
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        name:
          type: string
          description: Error name
          example: 'Bad Request'
        message:
          type: string
          description: Error message
          example: 'Bad Request'