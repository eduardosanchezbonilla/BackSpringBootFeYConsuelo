openapi: 3.0.0
info:
  title: FeYConsuelo REST Service
  description: Backend para gesti√≥n de Fe y Consuelo
  contact:
    name: Eduardo Sanchez Bonilla
    email: eduardosanchezbonilla@gmail.com
  license:
    name: Apache License Version 2.0
  version: 1.0.0
servers:
  - url: http://localhost:8082
    description: Generated server url
tags:
  - name: auth-controller
    description: Authorization operations
  - name: musician-controller
    description: Musician operations
  - name: voice-controller
    description: Voice operations
  - name: user-controller
    description: User operations
  - name: role-controller
    description: Role operations
  - name: partiture-group-controller
    description: Partiture Group operations
  - name: partiture-controller
    description: Partiture operations
  - name: user-partiture-group-controller
    description: User Partiture Group operations
  - name: inventory-controller
    description: Inventory operations
  - name: musician-inventory-controller
    description: Musician inventory operations
  - name: user-partiture-request-controller
    description: User Partiture Request operations
  - name: notification-controller
    description: Notification operations
  - name: video-category-controller
    description: Video category operations
  - name: video-controller
    description: Video operations
  - name: event-controller
    description: Event operations
  - name: musician-event-controller
    description: Musician Event operations
  - name: repertoire-controller
    description: Repertoire operations
  - name: repertoire-category-controller
    description: Repertoire category operations
  - name: repertoire-march-type-controller
    description: Repertoire march type operations
  - name: repertoire-event-controller
    description: Repertoire event operations
paths:
  "/auth/login":
    post:
      tags:
        - auth-controller
      summary: Login de usuario
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        '200':
          description: Login ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponseDto"
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician":
    post:
      tags:
        - musician-controller
      summary: Add a new musician register to the database
      operationId: postMusician
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns all the musician registers from the database
      operationId: getAllMusicians
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/group-by-voice":
    get:
      tags:
        - musician-controller
      summary: Returns all the musician registers from the database group by voice
      operationId: getMusiciansGroupByVoice
      parameters:
        - name: name
          in: query
          description: Nombre del musico a filtrar
          required: false
          example: 'Sergio Lozano'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianGroupByVoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}":
    put:
      tags:
        - musician-controller
      summary: Update any data for a musician register in the database
      operationId: updateMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - musician-controller
      summary: Returns the musician register from the database
      operationId: getMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-controller
      summary: Delete a musician register from the database
      operationId: deleteMusician
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/dni/{musicianDni}":
    get:
      tags:
        - musician-controller
      summary: Returns the musician register from the database
      operationId: getMusicianFromDni
      parameters:
        - name: musicianDni
          in: path
          description: Musician Dni
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{dni}/change-expired-password":
    put:
      tags:
        - musician-controller
      summary: Update password for the user asociated to the musician register in the database
      operationId: changeExpiredPasswordMusician
      parameters:
        - name: dni
          in: path
          description: Usuario asociado al musico (dni)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianChangeExpiredPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{dni}/reset-password":
    put:
      tags:
        - musician-controller
      summary: Reset password for the user asociated to the musician register in the database
      operationId: resetPasswordMusician
      parameters:
        - name: dni
          in: path
          description: Usuario asociado al musico (dni)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}/inventory/{inventoryId}":
    post:
      tags:
        - musician-inventory-controller
      summary: Insert a inventory elemento asocied to musician
      operationId: insertMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-inventory-controller
      summary: Delete a inventory element asocied to musician
      operationId: deleteMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}/inventory":
    get:
      tags:
        - musician-inventory-controller
      summary: Get all inventory elements of a musician
      operationId: getMusicianInventory
      parameters:
        - name: musicianId
          in: path
          description: Id del musico
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianInventoryResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/inventory/{inventoryId}/musician":
    get:
      tags:
        - musician-inventory-controller
      summary: Get all musician with inventaryId associed
      operationId: getMusicianWithInventoryAssociated
      parameters:
        - name: inventoryId
          in: path
          description: Id del elemento de inventario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MusicianResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user":
    post:
      tags:
        - user-controller
      summary: Add a new user register to the database
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - user-controller
      summary: Returns all the users registers from the database
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/group-by-role":
    get:
      tags:
        - user-controller
      summary: Returns all the user registers from the database group by user
      operationId: getUsersGroupByRole
      parameters:
        - name: filter
          in: query
          description: Filtro para username o nombre
          required: false
          example: 'admin'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserGroupByRoleResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/role/all":
    get:
      tags:
        - role-controller
      summary: Returns all distinct roles from the database
      operationId: getRoles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RoleResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/{username}":
    get:
      tags:
        - user-controller
      summary: Returns the user register from the database
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - user-controller
      summary: Delete a user register from the database
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/detail":
    put:
      tags:
        - user-controller
      summary: Update details of user
      operationId: updateUserDetail
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserDetailRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/roles":
    put:
      tags:
        - user-controller
      summary: Update the roles for a user register in the database
      operationId: updateUserRoles
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserRolesRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/password":
    put:
      tags:
        - user-controller
      summary: Update the password for a user register in the database
      operationId: updateUserPassword
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/firebase-token":
    put:
      tags:
        - user-controller
      summary: Update the firebase_token for a user register in the database
      operationId: updateUserFirebaseToken
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserFirebaseTokenRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/last-date-access":
    put:
      tags:
        - user-controller
      summary: Update the last-date-access for a user register in the database
      operationId: updateUserLastDateAccess
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/reset":
    put:
      tags:
        - user-controller
      summary: Resetea el password de un usuario
      operationId: resetUserPassword
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResetUserPasswordRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/partiture-group/{partitureGroupId}":
    post:
      tags:
        - user-partiture-group-controller
      summary: Insert a partiture group asocied to user
      operationId: insertUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
        - name: partitureGroupId
          in: path
          description: Id of partiture group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - user-partiture-group-controller
      summary: Delete a partiture group asocied to user
      operationId: deleteUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
        - name: partitureGroupId
          in: path
          description: Id of partiture group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/user/{username}/partiture-group":
    get:
      tags:
        - user-partiture-group-controller
      summary: Get all partiture group users
      operationId: getUserPartitureGroup
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserPartitureGroupResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/voice":
    post:
      tags:
        - voice-controller
      summary: Add a new voice register to the database
      operationId: postVoice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns all the voices registers from the database
      operationId: getAllVoices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/voice/{voiceId}":
    put:
      tags:
        - voice-controller
      summary: Update any data for a voice register in the database
      operationId: updateVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - voice-controller
      summary: Returns the voice register from the database
      operationId: getVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - voice-controller
      summary: Delete a voice register from the database
      operationId: deleteVoice
      parameters:
        - name: voiceId
          in: path
          description: Voice Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture-group":
    post:
      tags:
        - partiture-group-controller
      summary: Add a new partiture group
      operationId: postPartitureGroup
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PartitureGroupRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - partiture-group-controller
      summary: Returns all the partiture groups
      operationId: getAllPartitureGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PartitureGroupResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture-group/{partitureGroupId}":
    put:
      tags:
        - partiture-group-controller
      summary: Update any data for a vpartiture group
      operationId: updatePartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          description: Partiture Group Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PartitureGroupRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - partiture-group-controller
      summary: Returns the partiture group
      operationId: getPartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PartitureGroupResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - partiture-group-controller
      summary: Delete a partiture group
      operationId: deletePartitureGroup
      parameters:
        - name: partitureGroupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/partiture/{partitureGroupGoogleId}":
    get:
      tags:
        - partiture-controller
      summary: Returns all partitures in a group
      operationId: getAllPartituresInPartitureGroup
      parameters:
        - name: partitureGroupGoogleId
          in: path
          description: Google Id of partiture group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PartitureResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/partiture/{partitureGoogleId}/download":
    get:
      tags:
        - partiture-controller
      summary: Descarga una partitura
      operationId: downloadPartiture
      parameters:
        - name: partitureGoogleId
          in: path
          description: Google id de la partitura
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PartitureResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/inventory":
    post:
      tags:
        - inventory-controller
      summary: Add a new inventory element register to the database
      operationId: postInventory
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InventoryRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - inventory-controller
      summary: Returns all the inventory elements registers from the database
      operationId: getAllInventories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/InventoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/inventory/{inventoryId}":
    put:
      tags:
        - inventory-controller
      summary: Update any data for a inventory element register in the database
      operationId: updateInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InventoryRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - inventory-controller
      summary: Returns the inventory element register from the database
      operationId: getInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InventoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - inventory-controller
      summary: Delete a inventory element register from the database
      operationId: deleteInventory
      parameters:
        - name: inventoryId
          in: path
          description: Inventory Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/{username}/partiture/request":
    post:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures for a user
      operationId: requestPartiture
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestPartitureRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    put:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures for a user
      operationId: markReadUnreadRequestPartiture
      parameters:
        - name: username
          in: path
          description: Nombre de usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequestPartitureRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/user/partiture/request/all":
    get:
      tags:
        - user-partiture-request-controller
      summary: Request of partitures
      operationId: getAllRequestPartitureGroupByUser
      parameters:
        - name: all
          in: query
          description: Indica si obtenemos todas las notificaciones (true) o solo las no leidas (false)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserRequestPartitureGroupByUserResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/notification":
    post:
      tags:
        - notification-controller
      summary: Send notifications to topics o tokens
      operationId: sendNotification
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NotificationRequestDto"
        required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/notification/purge-user-tokens":
    put:
      tags:
        - notification-controller
      summary: Purge invalid user tokens
      operationId: purgeUserTokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/NotificationUserTokenResponseDto"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/notification/tokens":
    get:
      tags:
        - notification-controller
      summary: Get all tokens of users for send notifications
      operationId: getNotificationUserTokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/NotificationUserTokenResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/notification/topics":
    get:
      tags:
        - notification-controller
      summary: Get all topics for send notifications
      operationId: getNotificationTopics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/NotificationTopicResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/video-category":
    post:
      tags:
        - video-category-controller
      summary: Add a new video category
      operationId: insertVideoCategory
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VideoCategoryRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - video-category-controller
      summary: Returns all the video categories
      operationId: getAllVideoCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VideoCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/video-category/{videoCategoryId}":
    put:
      tags:
        - video-category-controller
      summary: Update any data for a Video Category
      operationId: updateVideoCategory
      parameters:
        - name: videoCategoryId
          in: path
          description: Video Category Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VideoCategoryRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - video-category-controller
      summary: Returns the video category
      operationId: getVideoCategory
      parameters:
        - name: videoCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VideoCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - video-category-controller
      summary: Delete a video category
      operationId: deleteVideoCategory
      parameters:
        - name: videoCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/video-category/{videoCategoryId}/image":
    get:
      tags:
        - video-category-controller
      summary: Returns the video category image
      operationId: getVideoCategoryImage
      parameters:
        - name: videoCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VideoCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/video":
    post:
      tags:
        - video-controller
      summary: Add a new video
      operationId: insertVideo
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VideoRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/video/{videoId}":
    put:
      tags:
        - video-controller
      summary: Update any data for a video
      operationId: updateVideo
      parameters:
        - name: videoId
          in: path
          description: Video Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VideoRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - video-controller
      summary: Delete a video
      operationId: deleteVideo
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/video/group-by-category":
    get:
      tags:
        - video-controller
      summary: Returns all the vides registers from the database group by category
      operationId: getVideosGroupByCategory
      parameters:
        - name: name
          in: query
          description: Nombre de la categoria o video a filtrar
          required: false
          example: 'Recopilatorio'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VideoGroupByCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/event":
    post:
      tags:
        - event-controller
      summary: Add a new event
      operationId: postEvent
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EventRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - event-controller
      summary: Returns all the events
      operationId: getAllEvents
      parameters:
        - name: eventType
          in: query
          description: Tipo
          required: false
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: startDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: endDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicianEventListResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/event/{eventType}/{eventId}":
    put:
      tags:
        - event-controller
      summary: Update any data for a event
      operationId: updateEvent
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EventRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - event-controller
      summary: Returns the event register from the database
      operationId: getEvent
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EventResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - event-controller
      summary: Delete a event
      operationId: deleteEvent
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/event/{eventType}/{eventId}/musicianAssistance":
    get:
      tags:
        - event-controller
      summary: Returns the event register from the database
      operationId: getEventMusicianAssistance
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EventMusicianAssistanceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/event/{eventType}/{eventId}/repertoire":
    get:
      tags:
        - event-controller
      summary: Returns the repertoire in a event
      operationId: getEventRepertoire
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EventRepertoireResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/event/{eventType}/{eventId}/report/assistance":
    get:
      tags:
        - event-controller
      summary: Informe de asistencia de un evento
      operationId: eventReportAssistance
      parameters:
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EventReportAssistanceResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/event/group-by-anyo":
    get:
      tags:
        - event-controller
      summary: Returns all the events registers from the database group by anyo
      operationId: getEventsGroupByAnyo
      parameters:
        - name: eventType
          in: query
          description: Tipo
          required: false
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: startDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: endDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: name
          in: query
          description: Nombre de la actuacion a filtrar
          required: false
          example: 'Concierto Santa Cecilia'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EventGroupByAnyoResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/musician/{musicianId}/event/{eventType}/{eventId}":
    post:
      tags:
        - musician-event-controller
      summary: Add a new musician event
      operationId: postMusicianEvent
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MusicianEventRequestDto"
        required: false
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - musician-event-controller
      summary: Delete a musician event
      operationId: deleteMusicianEvent
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/musician/{musicianId}/event":
    get:
      tags:
        - musician-event-controller
      summary: Returns all the events of musician
      operationId: getAllMusicianEvents
      parameters:
        - name: musicianId
          in: path
          description: Musician Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: query
          description: Tipo
          required: false
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: startDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: endDate
          in: query
          description: 'Fecha inicial de la campa√±a'
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicianEventListResponseDto"

        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-category":
    post:
      tags:
        - repertoire-category-controller
      summary: Add a new repertoire category
      operationId: insertRepertoireCategory
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireCategoryRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-category-controller
      summary: Returns all the repertoire categories
      operationId: getAllRepertoireCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RepertoireCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-category/{repertoireCategoryId}":
    put:
      tags:
        - repertoire-category-controller
      summary: Update any data for a Repertoire Category
      operationId: updateRepertoireCategory
      parameters:
        - name: repertoireCategoryId
          in: path
          description: Repertoire Category Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireCategoryRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-category-controller
      summary: Returns the repertoire category
      operationId: getRepertoireCategory
      parameters:
        - name: repertoireCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RepertoireCategoryResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - repertoire-category-controller
      summary: Delete a repertoire category
      operationId: deleteRepertoireCategory
      parameters:
        - name: repertoireCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march-type":
    post:
      tags:
        - repertoire-march-type-controller
      summary: Add a new repertoire march type category
      operationId: insertRepertoireMarchType
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireMarchTypeRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-march-type-controller
      summary: Returns all the repertoire march types
      operationId: getAllRepertoireMarchTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RepertoireMarchTypeResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march-type/{repertoireMarchTypeId}":
    put:
      tags:
        - repertoire-march-type-controller
      summary: Update any data for a Repertoire march type
      operationId: updateRepertoireMarchType
      parameters:
        - name: repertoireMarchTypeId
          in: path
          description: Repertoire March Type Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireMarchTypeRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-march-type-controller
      summary: Returns the repertoire march type
      operationId: getRepertoireMarchType
      parameters:
        - name: repertoireMarchTypeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RepertoireMarchTypeResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - repertoire-march-type-controller
      summary: Delete a repertoire march type
      operationId: deleteRepertoireMarchType
      parameters:
        - name: repertoireMarchTypeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/repertoire-march":
    post:
      tags:
        - repertoire-controller
      summary: Add a new repertoire march
      operationId: insertRepertoireMarch
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireMarchRequestDto"
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-controller
      summary: Returns all the repertoire marchs
      operationId: getAllRepertoireMarchs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RepertoireMarchResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march/{repertoireMarchId}":
    put:
      tags:
        - repertoire-controller
      summary: Update any data for a Repertoire march
      operationId: updateRepertoireMarch
      parameters:
        - name: repertoireMarchId
          in: path
          description: Repertoire March Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RepertoireMarchRequestDto"
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    get:
      tags:
        - repertoire-controller
      summary: Returns the repertoire march
      operationId: getRepertoireMarch
      parameters:
        - name: repertoireMarchId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RepertoireMarchResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - repertoire-controller
      summary: Delete a repertoire march
      operationId: deleteRepertoireMarch
      parameters:
        - name: repertoireMarchId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march/{repertoireCategoryId}/group-by-type":
    get:
      tags:
        - repertoire-controller
      summary: Returns all the repertoire march registers from the database group by type
      operationId: getCategoryRepertoireGroupByType
      parameters:
        - name: repertoireCategoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Nombre de la marcha a filtrar
          required: false
          example: 'Ave'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RepertoireMarchGroupByTypeResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march/group-by-type":
    get:
      tags:
        - repertoire-controller
      summary: Returns all the repertoire march registers from the database group by type
      operationId: getRepertoireGroupByType
      parameters:
        - name: name
          in: query
          description: Nombre de la marcha a filtrar
          required: false
          example: 'Ave'
          schema:
            type: string
        - name: current
          in: query
          description: Actual o no
          required: false
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RepertoireMarchGroupByTypeResponseDto"
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

  "/repertoire-march/{marchId}/event/{eventType}/{eventId}":
    post:
      tags:
        - repertoire-event-controller
      summary: Add a new repertoire march event
      operationId: postRepertoireEvent
      parameters:
        - name: marchId
          in: path
          description: March Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
    delete:
      tags:
        - repertoire-event-controller
      summary: Delete a repertoire march event
      operationId: deleteRepertoireEvent
      parameters:
        - name: marchId
          in: path
          description: March Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
  "/repertoire-march/{marchId}/event/{eventType}/{eventId}/order/{order}/numbers/{numbers}":
    put:
      tags:
        - repertoire-event-controller
      summary: Update order in a repertoire march event
      operationId: updateRepertoireEvent
      parameters:
        - name: marchId
          in: path
          description: March Id
          required: true
          schema:
            type: integer
            format: int64
        - name: eventType
          in: path
          description: Event Type
          required: true
          schema:
            type: string
            enum: [ 'REHEARSAL', 'PERFORMANCE' ]
            pattern: '^(REHEARSAL|PERFORMANCE)$'
        - name: eventId
          in: path
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
        - name: order
          in: path
          description: March order
          required: true
          schema:
            type: integer
        - name: numbers
          in: path
          description: March quantity
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"

components:
  schemas:
    ######################################################################
    AuthRequestDto:
      description: Auth request data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Username'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Password'
          minLength: 8
          nullable: false
          example: 'password'

    ######################################################################
    AuthResponseDto:
      description: Auth response data
      required:
        - username
        - roles
        - token
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        token:
          type: string
          description: 'Jwt token'
        musician:
          $ref: '#/components/schemas/MusicianResponseDto'
        userDetail:
          $ref: '#/components/schemas/UserDetailResponseDto'

    ######################################################################
    MusicianRequestDto:
      description: Musician data
      required:
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voiceId
        - birthDate
        - registrationDate
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          minLength: 5
          nullable: false
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          nullable: false
          minLength: 1
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          nullable: false
          minLength: 1
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          nullable: false
          minLength: 1
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          nullable: false
          minLength: 1
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          nullable: false
          minLength: 1
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          nullable: false
          minLength: 1
          example: 'email@gmail.com'
        voiceId:
          type: integer
          format: int64
          description: 'Voice of musician'
          nullable: false
          minLength: 1
          example: 1
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'
        birthDate:
          type: string
          format: datetime
          description: 'Fecha de nacimiento'
          example: '2024-10-04T14:10:59.306Z'
        registrationDate:
          type: string
          format: datetime
          description: 'Fecha de incorporacion'
          example: '2024-10-04T14:10:59.306Z'
        inventoryObservations:
          type: string
          description: 'Inventory observations'
          example: 'Observaciones'
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'

    ######################################################################
    MusicianChangeExpiredPasswordRequestDto:
      description: Musician User Password data
      required:
        - currentPassword
        - newPassword
        - repeatNewPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Contrase√±a actual'
          minLength: 8
          nullable: false
          example: 'password'
        newPassword:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatNewPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    MusicianResponseDto:
      description: Musician data
      required:
        - id
        - dni
        - name
        - surname
        - direction
        - municipality
        - province
        - voice
        - image
        - birthDate
        - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of musician'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of musician'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of musician'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of musician'
          example: 'Martos'
        province:
          type: string
          description: 'Province of musician'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del musico'
          example: 'email@gmail.com'
        voice:
          $ref: '#/components/schemas/VoiceResponseDto'
        image:
          type: string
          description: 'Image of musician in base64'
          example: 'image'
        birthDate:
          type: string
          format: datetime
          description: 'Fecha de nacimiento'
          example: '2024-10-04T14:10:59.306Z'
        registrationDate:
          type: string
          format: datetime
          description: 'Fecha de incorporacion'
          example: '2024-10-04T14:10:59.306Z'
        inventoryObservations:
          type: string
          description: 'Inventory observations'
          example: 'Observaciones'
        idLastRehearsal:
          type: integer
          format: int64
          description: 'Identificador ultimo ensayo, si existe'
          example: 27
        assistLastRehearsal:
          type: boolean
          description: 'Si el musico ha asistido al ultimo ensayo'
          example: true
        assistBus:
          type: boolean
          description: 'Si el musico ira en bus'
          example: true
        dateLastRehearsal:
          type: string
          format: date
          description: 'Fecha del ultimo ensayo'
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'

    ######################################################################
    MusicianGroupByVoiceResponseDto:
      description: Musician data grouped by voice
      type: object
      properties:
        voice:
          $ref: '#/components/schemas/VoiceResponseDto'
        musicians:
          type: array
          items:
            $ref: '#/components/schemas/MusicianResponseDto'

    ######################################################################
    UserGroupByRoleResponseDto:
      description: User data grouped by user
      type: object
      properties:
        role:
          type: string
          description: 'Role del usuario'
          nullable: false
          example: 'MUSICO'
        roleName:
          type: string
          description: 'Nombre del role del usuario'
          nullable: false
          example: 'MUSICO'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupByRoleDetailResponseDto'

    ######################################################################
    UserGroupByRoleDetailResponseDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        passwordExpired:
          type: boolean
          description: 'Indica si el password ha expirado'
          example: true
        userDetail:
          $ref: '#/components/schemas/UserDetailResponseDto'

    ######################################################################
    UserRequestDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          minLength: 4
          nullable: false
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          minLength: 8
          nullable: false
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of usuario'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of usuario'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of usuario'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of usuario'
          example: 'Martos'
        province:
          type: string
          description: 'Province of usuario'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del usuario'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of user in base64'
          example: 'image'
        description:
          type: string
          description: 'Description'
          example: ''
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'

    ######################################################################
    UpdateUserDetailRequestDto:
      description: User data
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of usuario'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of usuario'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of usuario'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of usuario'
          example: 'Martos'
        province:
          type: string
          description: 'Province of usuario'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del usuario'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of user in base64'
          example: 'image'
        description:
          type: string
          description: 'Description'
          example: ''
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'

    ######################################################################
    UpdateUserRolesRequestDto:
      description: Update User data
      required:
        - roles
      type: object
      properties:
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
            nullable: false

    ######################################################################
    UpdateUserPasswordRequestDto:
      description: Update User Password data
      required:
        - currentPassword
        - newPassword
        - repeatNewPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Contrase√±a actual'
          minLength: 8
          nullable: false
          example: 'password'
        newPassword:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatNewPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    UpdateUserFirebaseTokenRequestDto:
      description: A√±ade el token al array de tokens del usuario, sino existe
      required:
        - firebaseToken
      type: object
      properties:
        firebaseToken:
          type: string
          description: Token del dispositivo del usuario
          minLength: 1
          nullable: false
          example: 'token'

    ######################################################################
    ResetUserPasswordRequestDto:
      description: Reset User Password data
      required:
        - password
        - repeatPassword
      type: object
      properties:
        password:
          type: string
          description: 'Contrase√±a nueva'
          minLength: 8
          nullable: false
          example: 'passwordNew'
        repeatPassword:
          type: string
          description: 'Contrase√±a nueva repetida'
          minLength: 8
          nullable: false
          example: 'passwordNewRepetida'

    ######################################################################
    UserResponseDto:
      description: User data
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'username'
        password:
          type: string
          description: 'Contrase√±a'
          example: 'password'
        roles:
          description: 'Roles del usuario'
          type: array
          items:
            type: string
            example: 'ADMIN'
        passwordExpired:
          type: boolean
          description: 'Indica si el password ha expirado'
          example: true
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of user'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of user'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of user'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of user'
          example: 'Martos'
        province:
          type: string
          description: 'Province of user'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del user'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of iser in base64'
          example: 'image'
        description:
          type: string
          description: 'descripcion'
          example: ''
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'

    ######################################################################
    UserDetailResponseDto:
      description: User data
      type: object
      properties:
        dni:
          type: string
          description: 'Dni'
          example: '88888888Y'
        name:
          type: string
          description: 'Name of user'
          example: 'Jose'
        surname:
          type: string
          description: 'Surname of user'
          example: 'Lopez Ramirez'
        direction:
          type: string
          description: 'Postal Direction of user'
          example: 'C/Real,15'
        municipality:
          type: string
          description: 'Municipality of user'
          example: 'Martos'
        province:
          type: string
          description: 'Province of user'
          example: 'Jaen'
        email:
          type: string
          description: 'Email del user'
          example: 'email@gmail.com'
        image:
          type: string
          description: 'Image of iser in base64'
          example: 'image'
        description:
          type: string
          description: 'descripcion'
          example: ''
        phoneNumber:
          type: string
          description: 'Numero de telefono'
          example: '666256985'
        lastAccessDate:
          type: string
          format: datetime
          description: 'Fecha de ultimo acceso del usuario'
          example: '2024-10-04T14:10:59.306Z'
        appInstalled:
          type: boolean
        accessLastHours:
          type: boolean


    ######################################################################
    VoiceRequestDto:
      description: Voice data
      required:
        - order
        - name
      type: object
      properties:
        order:
          type: integer
          description: 'Order'
          minLength: 1
          nullable: false
          example: 1
        name:
          type: string
          description: 'Name of voice'
          nullable: false
          minLength: 1
          example: '1¬™ CORNETA
          '
        image:
          type: string
          description: 'Image of voice'
          example: 'image'

    ######################################################################
    VoiceResponseDto:
      description: Voice data
      required:
        - id
        - order
        - name
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        order:
          type: integer
          description: 'Order'
          example: 1
        name:
          type: string
          description: 'Name of voice'
          example: '1¬™ CORNETA'
        image:
          type: string
          description: 'Image of voice in base64'
          example: 'image'

    ######################################################################
    PartitureGroupRequestDto:
      description: Partiture Group Data
      required:
        - name
        - googleId
      type: object
      properties:
        name:
          type: string
          description: 'Name of partiture group'
          nullable: false
          minLength: 1
          example: '1¬™ CORNETA'
        googleId:
          type: string
          description: 'Id de la carpeta en google drive'
          example: 'id'

    ######################################################################
    PartitureGroupResponseDto:
      description: Partiture Group Data
      required:
        - id
        - name
        - googleId
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of partiture group'
          example: '1¬™ CORNETA'
        googleId:
          type: string
          description: 'Id de la carpeta en google drive'
          example: 'id'

    ######################################################################
    UserPartitureGroupResponseDto:
      description: User Partiture Group Data
      required:
        - id
        - name
        - assigned
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of partiture group'
          example: '1¬™ CORNETA'
        assigned:
          type: boolean
          description: 'If group is assigned to user'
          example: true

    ######################################################################
    PartitureResponseDto:
      description: Partiture Data
      required:
        - name
        - googleId
        - content
      type: object
      properties:
        name:
          type: string
          description: 'Name of partiture'
          example: 'AMOR DE MADRE'
        googleId:
          type: string
          description: 'Id de la partitura en google drive'
          example: 'id'
        content:
          type: string
          description: 'Contenido del fichero en base 64'
          example: 'content'

    ######################################################################
    InventoryRequestDto:
      description: Inventory data
      required:
        - order
        - name
        - units
      type: object
      properties:
        order:
          type: integer
          description: 'Order'
          minLength: 1
          nullable: false
          example: 1
        name:
          type: string
          description: 'Name of inventary element'
          nullable: false
          minLength: 1
          example: 'CHAQUETA'
        units:
          type: integer
          description: 'Unidades'
          example: 1
        image:
          type: string
          description: 'Image of inventory element'
          example: 'image'

    ######################################################################
    InventoryResponseDto:
      description: Inventory data
      required:
        - id
        - order
        - name
        - units
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        order:
          type: integer
          description: 'Order'
          example: 1
        name:
          type: string
          description: 'Name of inventory element'
          example: 'CHAQUETA'
        units:
          type: integer
          description: 'Unidades'
          example: 1
        image:
          type: string
          description: 'Image of inventory element in base64'
          example: 'image'
        musicianWithElement:
          type: integer
          description: 'Number of musicians with this element'
          example: 50

    ######################################################################
    MusicianInventoryResponseDto:
      description: Musician Inventory data
      required:
        - id
        - name
        - assigned
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of inventory element'
          example: 'CHAQUETA'
        image:
          type: string
          description: 'Image of inventory element in base64'
          example: 'image'
        assigned:
          type: boolean
          description: 'If inventory element to user'
          example: true

    ######################################################################
    UserRequestPartitureRequestDto:
      description: User Request Partiture data
      required:
        - description
        - readed
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: 1
        description:
          type: string
        readed:
          type: boolean
        markReadUnreadNotificationMessage:
          type: string

    ######################################################################
    UserRequestPartitureResponseDto:
      description: User Request Partiture data
      required:
        - id
        - username
        - description
        - readed
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Identifier'
          example: 1
        username:
          type: string
          description: 'Username'
          example: 'username'
        description:
          type: string
          example: 'description'
        readed:
          type: boolean
          example: false

    ######################################################################
    UserRequestPartitureGroupByUserResponseDto:
      description: User request partiture data grouped by user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponseDto'
        request:
          type: array
          items:
            $ref: '#/components/schemas/UserRequestPartitureResponseDto'

    ######################################################################
    RoleResponseDto:
      description: Role data
      required:
        - role
        - roleName
      type: object
      properties:
        role:
          type: string
          description: 'Role'
          example: 'ADMIN'
        roleName:
          type: string
          description: 'Nombre del role'
          example: 'Administrador'

    ######################################################################
    NotificationRequestDto:
      description: Notification Request data
      required:
        - title
        - notification
      type: object
      properties:
        title:
          type: string
          description: 'Titulo de la notificacion'
          example: 'Titulo'
          minLength: 1
          nullable: false
        notification:
          type: string
          description: 'Notificacion a enviar'
          example: 'Notificacion'
          minLength: 1
          nullable: false
        topics:
          type: array
          items:
            type: string
            example: 'GENERAL'
        tokens:
          type: array
          items:
            type: string
            example: 'token'

    ######################################################################
    NotificationUserTokenResponseDto:
      description: Notification User Token data
      required:
        - username
        - name
        - email
        - tokens
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'ADMIN'
        name:
          type: string
          description: 'Nombre del usuario'
          example: 'Antonio Sanchez Lopez'
        email:
          type: string
          description: 'Email del usuario'
          example: 'email@gmail.com'
        tokens:
          type: array
          items:
            type: string
            example: 'token'

    ######################################################################
    NotificationTopicResponseDto:
      description: Notification User Token data
      required:
        - topic
        - topicName
      type: object
      properties:
        topic:
          type: string
          description: 'Topic'
          example: 'general'
        topicName:
          type: string
          description: 'Nombre del topic'
          example: 'Topic General'

    ######################################################################
    VideoCategoryRequestDto:
      description: Video Category Data
      required:
        - name
        - isPublic
        - order
        - date
      type: object
      properties:
        name:
          type: string
          description: 'Name of video category'
          nullable: false
          minLength: 1
          example: 'Recopilatorio 2024'
        isPublic:
          type: boolean
          description: 'Video category public or no'
          example: true
        order:
          type: integer
          description: 'Order'
          example: 1
        image:
          type: string
          description: 'Image of video category in base64'
          example: 'image'
        date:
          type: string
          format: datetime
          description: 'Fecha de la galeria multimedia'
          example: '2024-10-04T14:10:59.306Z'

    ######################################################################
    VideoCategoryResponseDto:
      description: Video  Data
      required:
        - id
        - name
        - isPublic
        - order
        - date
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of video category'
          example: 'Recopilatorio 2024'
        isPublic:
          type: boolean
          description: 'Video category public or no'
          example: true
        order:
          type: integer
          description: 'Order'
          example: 1
        image:
          type: string
          description: 'Image of video category in base64'
          example: 'image'
        date:
          type: string
          format: datetime
          description: 'Fecha de la galeria multimedia'
          example: '2024-10-04T14:10:59.306Z'

    ######################################################################
    VideoRequestDto:
      description: Video Data
      required:
        - youtubeId
        - videoCategoryId
        - name
        - order
      type: object
      properties:
        youtubeId:
          type: string
          description: Identifier in youtube
          nullable: false
          minLength: 1
          example: 'id'
        videoCategoryId:
          type: integer
          format: int64
          description: Identifier of video category
          nullable: false
          example: '1'
        name:
          type: string
          description: 'Name of video'
          nullable: false
          minLength: 1
          example: 'Y Fue Azotado'
        description:
          type: string
          description: 'Description of video'
          example: 'Descripcion larga'
        order:
          type: integer
          description: 'Order'
          example: 1

    ######################################################################
    VideoResponseDto:
      description: Video  Data
      required:
        - id
        - youtubeId
        - videoCategoryId
        - name
        - order
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        youtubeId:
          type: string
          description: Identifier in yoputube
          example: 'id'
        videoCategoryId:
          type: integer
          format: int64
          description: Identifier of video category
          example: '1'
        name:
          type: string
          description: 'Name of video'
          nullable: false
          minLength: 1
          example: 'Y Fue Azotado'
        description:
          type: string
          description: 'Description of video'
          example: 'Descripcion larga'
        order:
          type: integer
          description: 'Order'
          example: 1

    ######################################################################
    VideoGroupByCategoryResponseDto:
      description: Video data grouped by categoria
      type: object
      properties:
        category:
          $ref: '#/components/schemas/VideoCategoryResponseDto'
        videos:
          type: array
          items:
            $ref: '#/components/schemas/VideoResponseDto'

    ######################################################

    EventDetailBaseDto:
      required:
        - type
        - date
        - startTime
        - endTime
        - voiceIdList
      type: object
      properties:
        type:
          type: string
          description: 'Tipo de evento'
          enum: [ 'REHEARSAL', 'PERFORMANCE' ]
          example: 'REHEARSAL'
          nullable: false
        title:
          type: string
          description: 'Titulo del evento'
          example: 'Certamen de Santa Cecilia'
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: 'Descripcion del evento'
          example: 'Descripcion'
          maxLength: 1000
        performanceType:
          type: string
          description: 'Tipo de actuacion'
          enum: [ 'CONCIERTO', 'DESFILE_PROCESIONAL' ]
          example: 'CONCIERTO'
        date:
          type: string
          format: date
          description: 'Fecha del evento'
          example: "2024-01-01"
          nullable: false
        startTime:
          type: string
          format: time
          description: 'Hora inicio del evento'
          example: "2023-02-08T18:04:28"
          nullable: false
        endTime:
          type: string
          format: time
          description: 'Hora inicio del evento'
          example: "2023-02-08T18:04:28"
          nullable: false
        voiceIdList:
          description: 'Lista de voces id'
          type: array
          items:
            type: integer
            example: '1'
          nullable: false
        voiceList:
          description: 'Lista de voces'
          type: array
          items:
            $ref: '#/components/schemas/VoiceResponseDto'
        repetitionPeriod:
          type: string
          description: 'Periodo de repeticion'
          enum: [ 'SEMANAL' ]
          example: 'CONCIERTO'
        endDate:
          type: string
          format: date
          description: 'Fecha fin del evento en caso de repeticion'
          example: "2024-01-01"
        location:
          type: string
          description: 'Localizacion del evento'
          maxLength: 200
        municipality:
          type: string
          description: 'Municipio del evento'
          maxLength: 100
        province:
          type: string
          description: 'Provincia del evento'
          maxLength: 100
        image:
          type: string
          description: 'Image of event in base64'
          example: 'image'
        displacementBus:
          type: boolean
          description: 'Indica en eventos performance, si hay desplazamiento en bus o no en el evento'
          example: false


    EventRequestDto:
      allOf:
        - $ref: '#/components/schemas/EventDetailBaseDto'

    EventResponseDto:
      type: object
      required:
        - id
        - clsClass
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: 'Id del evento'
              example: 1
            clsClass:
              type: string
              description: 'Cls class del evento'
              example: 'actuacion-day'
              enum: [ 'actuacion-day', 'ensayo-general-day','actuacion-day-ok', 'ensayo-general-day-ok' , 'actuacion-day-ok-ko' ]
            musicianBus:
              type: boolean
              example: true
            musicianAssist:
              type: boolean
              example: true
        - $ref: '#/components/schemas/EventDetailBaseDto'

    ######################################################################
    MusicianEventRequestDto:
      description: Musician Event Data
      required:
        - bus
      type: object
      properties:
        bus:
          type: boolean
          description: Si el musico va en bus o no
          nullable: false
          example: true

    ######################################################################
    EventGroupByAnyoResponseDto:
      description: Event data grouped by anyo
      type: object
      properties:
        anyo:
          type: string
          description: 'Anyio'
          example: ''
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventResponseDto'

    ######################################################################
    EventMusicianAssistanceResponseDto:
      description: Informacion de la asistencia de los musicos a un evento
      required:
        - event
        - musicians
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventResponseDto'
        musiciansGroupByVoice:
          type: array
          items:
            $ref: '#/components/schemas/MusicianGroupByVoiceResponseDto'

    ######################################################################
    EventRepertoireResponseDto:
      description: Informacion del repertorio de un eventio
      required:
        - event
        - musicians
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventResponseDto'
        repertoireMarchGroupByType:
          type: array
          items:
            $ref: '#/components/schemas/RepertoireMarchGroupByTypeResponseDto'


    ######################################################################
    RepertoireCategoryRequestDto:
      description: Repertoire Category Data
      required:
        - name
        - order
        - current
      type: object
      properties:
        name:
          type: string
          description: 'Name of repertoire category'
          nullable: false
          minLength: 1
          example: 'Repertorio Actual'
        order:
          type: integer
          description: 'Order'
          example: 1
        current:
          type: boolean
          description: 'Actual'
          example: true
          default: true
        image:
          type: string
          description: 'Image of repertoire category in base64'
          example: 'image'

    ######################################################################
    RepertoireCategoryResponseDto:
      description: Repertoire Category Data
      required:
        - id
        - name
        - order
        - current
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of repertoire category'
          example: 'Repertorio Actual'
        order:
          type: integer
          description: 'Order'
          example: 1
        current:
          type: boolean
          description: 'Actual'
          example: true
          default: true
        image:
          type: string
          description: 'Image of repertoire category in base64'
          example: 'image'

    ######################################################################
    RepertoireMarchTypeRequestDto:
      description: Repertoire March Type Data
      required:
        - name
        - order
      type: object
      properties:
        name:
          type: string
          description: 'Name of repertoire march type'
          nullable: false
          minLength: 1
          example: 'Propia'
        order:
          type: integer
          description: 'Order'
          example: 1
        image:
          type: string
          description: 'Image of repertoire march type in base64'
          example: 'image'

    ######################################################################
    RepertoireMarchTypeResponseDto:
      description: Repertoire MarchType Data
      required:
        - id
        - name
        - order
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        name:
          type: string
          description: 'Name of repertoire march type'
          example: 'Propia'
        order:
          type: integer
          description: 'Order'
          example: 1
        image:
          type: string
          description: 'Image of repertoire march type in base64'
          example: 'image'

    ######################################################################
    RepertoireMarchRequestDto:
      description: Repertoire March Data
      required:
        - categoryId
        - typeId
        - name
        - author
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          description: 'Id de categoria'
          example: '1'
        typeId:
          type: integer
          format: int64
          description: 'Id de type'
          example: '1'
        name:
          type: string
          description: 'Name of repertoire march'
          nullable: false
          minLength: 1
          example: 'Ave Maria'
        author:
          type: string
          description: 'Author of repertoire march'
          nullable: false
          minLength: 1
          example: 'Pedro Pacheco'
        description:
          type: string
          description: 'Description of repertoire march'
          example: 'Descripcion'
        image:
          type: string
          description: 'Image of repertoire march type in base64'
          example: 'image'
        youtubeId:
          type: string
          description: Identifier in youtube
          example: 'id'

    ######################################################################
    RepertoireMarchResponseDto:
      description: Repertoire MarchType Data
      required:
        - id
        - category
        - type
        - name
        - author
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier
          example: '1'
        category:
          $ref: '#/components/schemas/RepertoireCategoryResponseDto'
        type:
          $ref: '#/components/schemas/RepertoireMarchTypeResponseDto'
        name:
          type: string
          description: 'Name of repertoire march'
          nullable: false
          minLength: 1
          example: 'Ave Maria'
        author:
          type: string
          description: 'Author of repertoire march'
          nullable: false
          minLength: 1
          example: 'Pedro Pacheco'
        description:
          type: string
          description: 'Description of repertoire march'
          example: 'Descripcion'
        image:
          type: string
          description: 'Image of repertoire march type in base64'
          example: 'image'
        youtubeId:
          type: string
          description: Identifier in youtube
          example: 'id'
        checked:
          type: boolean
          description: Indica si esta marcada o no para eventos
          example: false
        order:
          type: integer
          description: 'orden'
          example: 1
        numbers:
          type: integer
          description: 'Numero de veces itnerpretada'
          example: 1

    ######################################################################
    RepertoireMarchGroupByTypeResponseDto:
      description: Repertoire data grouped by categoria and type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RepertoireMarchTypeResponseDto'
        marchs:
          type: array
          items:
            $ref: '#/components/schemas/RepertoireMarchResponseDto'

    ######################################################################
    EventReportAssistanceResponseDto:
      description: Event Report Assistance Data
      required:
        - event
        - report
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventResponseDto'
        report:
          type: string
          description: 'Contenido del informe en base 64'
          example: 'report'

    ######################################################################
    MusicianEventListResponseDto:
      description: Musician Event Response Data
      required:
        - eventAssistStatistic
        - musicianEventAssistStatistic
        - musiciansAssistInformation
        - events
      type: object
      properties:
        eventAssistStatistic:
          $ref: '#/components/schemas/EventAssistStatisticsResponseDto'
        musicianEventAssistStatistic:
          $ref: '#/components/schemas/MusicianEventAssistStatisticsResponseDto'
        musiciansAssistInformation:
          description: 'Informacion de asistencia de los musicos'
          type: array
          items:
            $ref: '#/components/schemas/MusicianAssistInformationResponseDto'
        events:
          description: 'Eventos'
          type: array
          items:
            $ref: '#/components/schemas/EventResponseDto'

    ######################################################################
    MusicianEventAssistStatisticsResponseDto:
      description: Musician Event Response Data
      required:
        - musicianCurrentMonthPercentageAssistRehearsalEvents
        - musicianCurrentMonthAssistNumberRehearsalEvents
        - musicianCurrentMonthTotalNumberRehearsalEvents
        - musicianCurrentMonthPercentageAssistPerformanceEvents
        - musicianCurrentMonthAssistNumberPerformanceEvents
        - musicianCurrentMonthTotalNumberPerformanceEvents
        - musicianCurrentMonthPercentageAssistEvents
        - musicianCurrentMonthAssistNumberEvents
        - musicianCurrentMonthTotalNumberEvents
        - musicianCurrentYearPercentageAssistRehearsalEvents
        - musicianCurrentYearAssistNumberRehearsalEvents
        - musicianCurrentYearTotalNumberRehearsalEvents
        - musicianCurrentYearPercentageAssistPerformanceEvents
        - musicianCurrentYearAssistNumberPerformanceEvents
        - musicianCurrentYearTotalNumberPerformanceEvents
        - musicianCurrentYearPercentageAssistEvents
        - musicianCurrentYearAssistNumberEvents
        - musicianCurrentYearTotalNumberEvents
        - musicianHistoricPercentageAssistRehearsalEvents
        - musicianHistoricAssistNumberRehearsalEvents
        - musicianHistoricTotalNumberRehearsalEvents
        - musicianHistoricPercentageAssistPerformanceEvents
        - musicianHistoricAssistNumberPerformanceEvents
        - musicianHistoricTotalNumberPerformanceEvents
        - musicianHistoricPercentageAssistEvents
        - musicianHistoricAssistNumberEvents
        - musicianHistoricTotalNumberEvents
      type: object
      properties:
        musicianCurrentMonthPercentageAssistRehearsalEvents:
          type: number
          format: double
          example: 50
        musicianCurrentMonthAssistNumberRehearsalEvents:
          type: integer
          example: 50
        musicianCurrentMonthTotalNumberRehearsalEvents:
          type: integer
          example: 50
        musicianCurrentMonthPercentageAssistPerformanceEvents:
          type: number
          format: double
          example: 50
        musicianCurrentMonthAssistNumberPerformanceEvents:
          type: integer
          example: 50
        musicianCurrentMonthTotalNumberPerformanceEvents:
          type: integer
          example: 50
        musicianCurrentMonthPercentageAssistEvents:
          type: number
          format: double
          example: 50
        musicianCurrentMonthAssistNumberEvents:
          type: integer
          example: 50
        musicianCurrentMonthTotalNumberEvents:
          type: integer
          example: 50
        musicianCurrentYearPercentageAssistRehearsalEvents:
          type: number
          format: double
          example: 50
        musicianCurrentYearAssistNumberRehearsalEvents:
          type: integer
          example: 50
        musicianCurrentYearTotalNumberRehearsalEvents:
          type: integer
          example: 50
        musicianCurrentYearPercentageAssistPerformanceEvents:
          type: number
          format: double
          example: 50
        musicianCurrentYearAssistNumberPerformanceEvents:
          type: integer
          example: 50
        musicianCurrentYearTotalNumberPerformanceEvents:
          type: integer
          example: 50
        musicianCurrentYearPercentageAssistEvents:
          type: number
          format: double
          example: 50
        musicianCurrentYearAssistNumberEvents:
          type: integer
          example: 50
        musicianCurrentYearTotalNumberEvents:
          type: integer
          example: 50
        musicianHistoricPercentageAssistRehearsalEvents:
          type: number
          format: double
          example: 50
        musicianHistoricAssistNumberRehearsalEvents:
          type: integer
          example: 50
        musicianHistoricTotalNumberRehearsalEvents:
          type: integer
          example: 50
        musicianHistoricPercentageAssistPerformanceEvents:
          type: number
          format: double
          example: 50
        musicianHistoricAssistNumberPerformanceEvents:
          type: integer
          example: 50
        musicianHistoricTotalNumberPerformanceEvents:
          type: integer
          example: 50
        musicianHistoricPercentageAssistEvents:
          type: number
          format: double
          example: 50
        musicianHistoricAssistNumberEvents:
          type: integer
          example: 50
        musicianHistoricTotalNumberEvents:
          type: integer
          example: 50

    ######################################################################
    MusicianAssistInformationResponseDto:
      description: Musician Assist Information Response Data
      required:
        - id
        - name
        - surname
        - totalRehearsal
        - musicianAssistsRehearsal
        - musicianPercentageAssistsRehearsal
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        musicianPercentageAssistsRehearsal:
          type: number
          format: double
          example: 50
        totalRehearsal:
          type: integer
          example: 50
        musicianAssistsRehearsal:
          type: integer
          example: 50


    ######################################################################
    EventAssistStatisticsResponseDto:
      description: Event statistics Response Data
      required:
        - averageAssitsNumber
        - maxAssitsNumber
        - maxDateAssitsNumber
        - minAssitsNumber
        - minDateAssitsNumber
      type: object
      properties:
        averageAssitsNumber:
          type: number
          format: double
          example: 50
        maxAssitsNumber:
          type: integer
          example: 50
        maxDateAssitsNumber:
          type: string
          format: date
          example: "2024-01-01"
        minAssitsNumber:
          type: integer
          example: 50
        minDateAssitsNumber:
          type: string
          format: date
          example: "2024-01-01"


    ######################################################################
    ErrorDto:
      required:
        - message
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        name:
          type: string
          description: Error name
          example: 'Bad Request'
        message:
          type: string
          description: Error message
          example: 'Bad Request'